General GIT commit conventions
""""""""""""""""""""""""""""""

-  commits should not influence existing functionalities
-  commits to ``origin/develop`` have to pass the tests without error => run unit test before ``git push``
-  new features need separate unit tests
-  branch for new features
-  do not commit to ``origin/master``
-  each functional/logical change gets its own commit (e.g. one change of a feature or a bug fix)
-  no excessive use of ``logger.debug`` outputs (in commits) and never commit ``print`` commands
-  try to use ``git pull ––rebase`` instead of ``git pull`` to keep the history clean from automatic merge logs


GIT commit messages: What to do
"""""""""""""""""""""""""""""""

-  Use imperative (*Add file …*)
-  First line is the caption of the commit (should be less than 50 chars)

   -  summarizes the commit
   -  mentions which code is affected (e.g. by stating the changes module/class)

-  Second line is blank
-  Following lines give a longer description and list changes in detail (use "- " or "* " as bullet points)

   -  Why is the change necessary
   -  How does it address the issue
   -  Possible side effects
   -  Give Issue/Feature-ID of GitHub; nevertheless answer the preceding questions

      -  ``Clos[e[s]]|Fix[e[s]]|Resolve[e[s]] issue #1234567`` – use one of the keywords to automatically close an issue
      -  ``Relates to issue #1234567`` – state issue id also when the issue is not supposed to be closed

GIT commit messages: What not to do
"""""""""""""""""""""""""""""""""""

-  Never use the ``-m <msg>``/``--message=<msg>`` flag to ``git commit``
-  Do not assume that the reader knows the details about bugs, features or previous commits
-  Neither assume that the reader looks at the commited code

Setting up your system
""""""""""""""""""""""

Add this line to your ``~/.vimrc`` to add spell checking and automatic wrapping at the recommended 72 columns to you commit messages.

``autocmd Filetype gitcommit setlocal spell textwidth=72``

Explaining example
""""""""""""""""""

.. code-block:: none

  Capitalized, short (50 chars or less) summary

  More detailed explanatory text, if necessary. Wrap it to about 72 characters or so. In some contexts, the first line is treated as the subject of an email and the rest of the text as the body. The blank line separating the summary from the body is critical (unless you omit the body entirely); tools like rebase can get confused if you run the two together.

  Write your commit message in the imperative: "Fix bug" and not "Fixed bug" or "Fixes bug." This convention matches up with commit messages generated by commands like git merge and git revert.

  Further paragraphs come after blank lines.

  - Bullet points are okay, too
  - Typically a hyphen or asterisk is used for the bullet, followed by a single space
  - Use a hanging indent

Bad examples (more subtle) and their explanation
""""""""""""""""""""""""""""""""""""""""""""""""

- https://wiki.openstack.org/wiki/GitCommitMessages#Some_examples_of_bad_practice

Sources
"""""""

- http://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message
- http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html
- https://wiki.openstack.org/wiki/GitCommitMessages
- https://help.github.com/articles/closing-issues-via-commit-messages/
